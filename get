#!/usr/bin/env bash

# local network
if [ -z "$(docker network inspect --format='{{.Id}}' local)" ]; then
  docker network create local
fi

case $1 in
redis*)
  if [ ! -f "$(pwd)/redis/data/redis.conf" ]; then
    echo "redis config file not found"
    exit
  fi
  redis_container_status=$(docker container inspect --format='{{.State.Status}}' redis)
  if [ -z "$redis_container_status" ]; then
    docker run \
      --name redis \
      --network local \
      --restart always \
      -v $(pwd)/redis/data/persist:/data \
      -v $(pwd)/redis/data/redis.conf:/usr/local/etc/redis/redis.conf \
      -p 6379:6379 \
      -h redis_docker@$(hostname) \
      -d redis redis-server /usr/local/etc/redis/redis.conf
  elif [ "$redis_container_status" = "exited" ]; then
    docker start redis
  fi
  docker exec \
    -e TERM=xterm-256color \
    -e COLUMNS=$(tput cols) \
    -e LINES=$(tput lines) \
    -it redis redis-cli
  ;;
influxdb*)
  if [ ! -f "$(pwd)/influxdb/data/influxdb.conf" ]; then
    echo "influxdb config file not found"
    exit
  fi
  influxdb_container_status=$(docker container inspect --format='{{.State.Status}}' influxdb)
  if [ -z "$influxdb_container_status" ]; then
    docker run \
      --name influxdb \
      --network local \
      --restart always \
      -v $(pwd)/influxdb/data/persist:/var/lib/influxdb \
      -v $(pwd)/influxdb/data/influxdb.conf:/etc/influxdb/influxdb.conf \
      -p 8086:8086 \
      -p 2003:2003 \
      -h influxdb_docker@$(hostname) \
      -d influxdb -config /etc/influxdb/influxdb.conf
  elif [ "$influxdb_container_status" = "exited" ]; then
    docker start influxdb
  fi
  docker exec \
    -e TERM=xterm-256color \
    -e COLUMNS=$(tput cols) \
    -e LINES=$(tput lines) \
    -it influxdb influx
  ;;
grafana*)
  grafana_container_status=$(docker container inspect --format='{{.State.Status}}' grafana)
  if [ -z "$grafana_container_status" ]; then
    docker run \
      --name grafana \
      --network local \
      --restart always \
      -u root \
      -v $(pwd)/grafana/data/persist:/var/lib/grafana \
      -p 3456:3000 \
      -h grafana_docker@$(hostname) \
      -e "GF_SERVER_ROOT_URL=http://your.domain.name" \
      -e "GF_SECURITY_ADMIN_PASSWORD=secret" \
      -d grafana/grafana
  elif [ "$grafana_container_status" = "exited" ]; then
    docker start grafana
  fi
  docker exec \
    -e TERM=xterm-256color \
    -e COLUMNS=$(tput cols) \
    -e LINES=$(tput lines) \
    -it grafana /bin/bash
  ;;
postgres*)
  postgres_container_status=$(docker container inspect --format='{{.State.Status}}' postgres)
  if [ -z "$postgres_container_status" ]; then
    docker run \
      --name postgres \
      --network local \
      --restart always \
      -v $(pwd)/postgresql/data/persist:/var/lib/postgresql/data \
      -p 5432:5432 \
      -h postgres_docker@$(hostname) \
      -e "POSTGRES_PASSWORD=secret" \
      -d postgres
  elif [ "$postgres_container_status" = "exited" ]; then
    docker start postgres
  fi
  docker exec \
    -e TERM=xterm-256color \
    -e COLUMNS=$(tput cols) \
    -e LINES=$(tput lines) \
    -it postgres psql -U postgres
  ;;
mongodb*)
  mongodb_container_status=$(docker container inspect --format='{{.State.Status}}' mongodb)
  if [ -z "$mongodb_container_status" ]; then
    docker run \
      --name mongodb \
      --network local \
      --restart always \
      -v $(pwd)/mongodb/data/db:/data/db \
      -v $(pwd)/mongodb/data/mongod.conf:/etc/mongo/mongod.conf \
      -p 27017:27017 \
      -h mongodb_docker@$(hostname) \
      -d mongo --config /etc/mongo/mongod.conf
  elif [ "$mongodb_container_status" = "exited" ]; then
    docker start mongodb
  fi
  docker exec \
    -e TERM=xterm-256color \
    -e COLUMNS=$(tput cols) \
    -e LINES=$(tput lines) \
    -it mongodb
  ;;
*)
  echo "You must specify a container: $ ./get [option]"
  echo "  redis    - get the redis container"
  echo "  grafana  - get the Grafana container"
  echo "  postgres - get the PostgreSQL container"
  echo "  influxdb - get the InfluxDB container"
  echo "  mongodb  - get the mongodb container"
  ;;
esac
